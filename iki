import os, json, asyncio, sys
from telethon import TelegramClient, events, Button
from telethon.sync import TelegramClient as TMPTelegramClient
from telethon.errors import FloodWaitError, PhoneNumberFloodError, SessionPasswordNeededError, UsersTooMuchError
from telethon.tl.functions.channels import JoinChannelRequest, InviteToChannelRequest
from telethon.tl.functions.messages import ImportChatInviteRequest
from telethon.sessions import StringSession
from importlib import import_module

ADMIN = 1809795148

API_KEY = 8366066

API_HASH = "1d938f732678d82d79bb97d58a1943d1"

STRING_SESSION = ""

Getter = None
Number = None
TempClient = None
Grab = None
inAdding = False
canAdd = True
AddedUsers = []

if os.path.exists("SSs.json"):
	with open("SSs.json", "r+") as f:
		SSs = json.load(f)
else:
	SSs = {}
	with open("SSs.json", "w+") as f:
		json.dump(SSs, f)
	

if os.path.exists("ArchSSs.json"):
	with open("ArchSSs.json", "r+") as f:
		ArchSSs = json.load(f)
else:
	ArchSSs = {}
	with open("ArchSSs.json", "w+") as f:
		json.dump(ArchSSs, f)
	

def saveSS():
	global SSs
	with open("SSs.json", "w+") as f:
		json.dump(SSs, f)
	

def saveArchSS():
	global ArchSSs
	with open("ArchSSs.json", "w+") as f:
		json.dump(ArchSSs, f)
	

async def addUsers(client, Users, group):
	global canAdd, AddedUsers
	AddedUsers = []
	for user in Users:
		if canAdd:
			AddedUsers.append(user)
			try:
				await client(InviteToChannelRequest(group, [user]))
				await asyncio.sleep(0.2)
			except:
				pass
		else:
			break
		
	

async def timeoutAdd(timeout):
	global canAdd
	await asyncio.sleep(timeout)
	canAdd = False

bot = TelegramClient("bot", API_KEY, API_HASH)

@bot.on(events.NewMessage(incoming=True))
async def RaspaManager(e):
	global ADMIN, Getter, Number, TempClient, API_KEY, API_HASH, ArchSSs, SSs, Grab, inAdding, canAdd, AddedUsers
	if e.is_private and e.chat_id == ADMIN:
		if e.text == "/start":
			Getter, Number, TempClient = None, None, None
			await e.respond("**🤖 Pannello Raspa Bot\n\n⚙ Versione » 2.1**", buttons=[[Button.inline("📞 Voip", "voip")], [Button.inline("👥 Ruba", "grab"), Button.inline("✔ Raspa", "add")]])
		elif Getter != None:
			if Getter == 0:
				Getter = None
				if not e.text in SSs:
					if not e.text in ArchSSs:
						TempClient = TMPTelegramClient(StringSession(), API_KEY, API_HASH)
						await TempClient.connect()
						try:
							await TempClient.send_code_request(phone=e.text, force_sms=False)
							Number = e.text
							Getter = 1
							await e.respond("**📩 Inserisci Il Codice 📩**", buttons=[Button.inline("❌ Annulla", "voip")])
						except PhoneNumberFloodError:
							await e.respond("**❌ Troppi Tentativi! Prova con un altro numero ❌**", buttons=[Button.inline("🔄 Riprova", "addvoip")])
						except:
							await e.respond("**❌ Numero Non Valido ❌**", buttons=[Button.inline("🔄 Riprova", "addvoip")])
					else:
						await e.respond("**❌ Voip Archiviato! Riaggiungilo ❌**", buttons=[[Button.inline("📁 Voip Archiviati", "arch")], [Button.inline("🔄 Riprova", "addvoip")]])
				else:
					await e.respond("**❌ Voip già aggiunto ❌**", buttons=[Button.inline("🔄 Riprova", "addvoip")])
			elif Getter == 1:
				try:
					await TempClient.sign_in(phone=Number, code=e.text)
					SSs[Number] = StringSession.save(TempClient.session)
					Getter, Number = None, None
					saveSS()
					await e.respond("**✅ Voip Aggiunto Correttamente ✅**", buttons=[Button.inline("🔙 Indietro", "voip")])
				except SessionPasswordNeededError:
					Getter = 2
					await e.respond("**🔑 Inserisci La Password (2FA) 🔑**", buttons=[Button.inline("❌ Annulla", "voip")])
				except:
					Getter, Number = None, None
					await e.respond("**❌ Codice Errato ❌**", buttons=[Button.inline("🔄 Riprova", "addvoip")])
			elif Getter == 2:
				try:
					await TempClient.sign_in(phone=Number, password=e.text)
					SSs[Number] = StringSession.save(TempClient.session)
					Getter, Number = None, None
					saveSS()
					await e.respond("**✅ Voip Aggiunto Correttamente ✅**", buttons=[Button.inline("🔙 Indietro", "voip")])
				except:
					Getter, Number = None, None
					await e.respond("**❌ Password Errata ❌**", buttons=[Button.inline("🔄 Riprova", "addvoip")])
			elif Getter == 3:
				Getter = None
				if e.text in SSs:
					await e.respond(f"**🔧 Gestione »** `{e.text}`", buttons=[[Button.inline("📁 Archivia", "arch;" + e.text), Button.inline("➖ Rimuovi", "del;" + e.text)], [Button.inline("🔙 Indietro", "voip")]])
				else:
					await e.respond("**❌ Voip Non Trovato ❌**", buttons=[Button.inline("🔄 Riprova", "voips")])
			elif Getter == 4:
				Getter = None
				if e.text in ArchSSs:
					await e.respond(f"**🔧 Gestione »** `{e.text}`", buttons=[[Button.inline("➕ Riaggiungi", "add;" + e.text), Button.inline("➖ Rimuovi", "delarch;" + e.text)], [Button.inline("🔙 Indietro", "voip")]])
				else:
					await e.respond("**❌ Voip Non Trovato ❌**", buttons=[Button.inline("🔄 Riprova", "voips")])
			elif Getter == 5:
				Getter == None
				if e.text != None and e.text != "":
					if "t.me/" in e.text or "telegram.me/" in e.text or e.text.startswith("@"):
						if not " " in e.text:
							Grab = e.text
							await e.respond("**✅ Gruppo Impostato Correttamente ✅**", buttons=[[Button.inline("✔ Raspa", "add")], [Button.inline("🔙 Indietro", "grab")]])
						else:
							await e.respond("**❌ Al momento puoi inserire un solo gruppo ❌**", buttons=[Button.inline("🔄 Riprova", "setgrab")])
					else:
						await e.respond("**❌ Devi inserire un link o una @ di un gruppo ❌**", buttons=[Button.inline("🔄 Riprova", "setgrab")])
				else:
					await e.respond("**⚠️ Formato Non Valido ⚠️**", buttons=[Button.inline("🔄 Riprova", "setgrab")])
			elif Getter == 6:
				Getter == None
				if e.text != None and e.text != "":
					if "t.me/" in e.text or "telegram.me/" in e.text or e.text.startswith("@"):
						if not " " in e.text:
							inAdding = True
							canNotify = True
							banned = []
							Users = []
							msg = await e.respond("**✅ Aggiunta Membri In Corso ✅**\nATTENDI "+ str(len(SSs) * 120) + " secondi.." , buttons=[Button.inline("❌ Interrompi", "stop")])
							for SS in SSs:
								isAlive = False
								CClient = TMPTelegramClient(StringSession(SSs[SS]), API_KEY, API_HASH)
								await CClient.connect()
								try:
									me = await CClient.get_me()
									if me == None:
										isAlive = False
									else:
										isAlive = True
								except:
									isAlive = False
								if isAlive:
									async with CClient as client:
										try:
											if "/joinchat/" in Grab:
												if Grab.endswith("/"):
													l = len(Grab) - 2
													Grab = Grab[0:l]
												st = Grab.split("/")
												L = st.__len__() - 1
												group = st[L]
												try:
													await client(ImportChatInviteRequest(group))
												except:
													pass
											else:
												try:
													await client(JoinChannelRequest(Grab))
												except:
													pass
											ent = await client.get_entity(Grab)
											try:
												users = client.iter_participants(ent.id, aggressive=True)
												ent2 = await client.get_entity(e.text)
												users2 = client.iter_participants(ent2.id, aggressive=True)
												Users2 = []
												async for user2 in users2:
													Users2.append(user2.id)

												async for user in users:
													try:
														if not user.bot and not user.id in Users:
															if not user.id in Users2:
																Users.append(user.id)
													except:
														pass
											except:
												await msg.edit("**❌ Gruppo Non Valido ❌**", buttons=[Button.inline("🔄 Riprova", "grab")])
												canNotify = False
												break
										except FloodWaitError as err:
											await msg.edit(f"**⏳ Attendi altri {err.seconds} prima di riutilizzare il bot ⏳**", buttons=[Button.inline("🔙 Indietro", "back")])
											canNotify = False
											break
										except:
											await msg.edit("**❌ Gruppo Non Trovato ❌**", buttons=[[Button.inline("ℹ️ Più Info", "info;" + SS)], [Button.inline("🔄 Riprova", "grab")]])
											canNotify = False
											break
										try:
											if "/joinchat/" in e.text:
												if e.text.endswith("/"):
													l = len(e.text) - 2
													text = e.text[0:l]
												else:
													text = e.text
												st = text.split("/")
												L = st.__len__() - 1
												group2 = st[L]
												try:
													await client(ImportChatInviteRequest(group2))
												except:
													pass
											else:
												try:
													await client(JoinChannelRequest(e.text))
												except:
													pass

											canAdd = True
											await asyncio.gather(addUsers(client, Users, ent2.id), timeoutAdd(120))
											for user in AddedUsers:
												if user in Users:
													Users.remove(user)
										except:
											await msg.edit("**❌ Gruppo Non Trovato ❌**", buttons=[[Button.inline("ℹ️ Più Info", "info;" + SS)], [Button.inline("🔄 Riprova", "add")]])
											canNotify = False
											break
								else:
									banned.append(SS)
									await e.respond(f"**⚠️ ATTENZIONE »** __Il voip__ `{SS}` __potrebbe essere stato bannato da telegram! Se l' hai solo disconnesso per errore riaggiungilo ;)__")
							if banned.__len__() > 0:
								for n in banned:
									if n in SSs:
										del(SSs[n])
								saveSS()
							inAdding = False
							if canNotify:
								await msg.edit(f"**✅ Aggiunta Membri Completata ✅**", buttons=[Button.inline("🔙 Indietro", "back")])
						else:
							await e.respond("**❌ Al momento puoi inserire un solo gruppo ❌**", buttons=[Button.inline("🔄 Riprova", "add")])
					else:
						await e.respond("**❌ Devi inserire un link o una @ di un gruppo ❌**", buttons=[Button.inline("🔄 Riprova", "add")])
				else:
					await e.respond("**⚠️ Formato Non Valido ⚠️**", buttons=[Button.inline("🔄 Riprova", "add")])
				
			
		
	

@bot.on(events.CallbackQuery())
async def callbackQuery(e):
	global ADMIN, Getter, Number, TempClient, API_KEY, API_HASH, ArchSSs, SSs, Grab, inAdding
	if e.sender_id == ADMIN:
		if e.data == b"back":
			Getter, Number, TempClient = None, None, None
			await e.edit("**🤖 Pannello Raspa Bot\n\n⚙ Versione » 2.1**", buttons=[[Button.inline("📞 Voip", "voip")], [Button.inline("👥 Ruba", "grab"), Button.inline("✔ Raspa", "add")]])
		elif e.data == b"stop":
			await e.edit("**✅ Aggiunta Interrotta ✅**", buttons=[Button.inline("🔙 Indietro", "back")])
			python = sys.executable
			os.execl(python, python, *sys.argv)
		elif inAdding:
			await e.answer("❌» Questa sezione è bloccata durante l' aggiunta membri!", alert=True)
		elif e.data == b"voip":
			Getter, Number, TempClient = None, None, None
			await e.edit(f"__📞 Voip Aggiunti »__ **{SSs.__len__()}**", buttons=[[Button.inline("➕ Aggiungi", "addvoip"), Button.inline("🔧 Gestisci", "voips")], [Button.inline("📁 Archiviati", "arch")], [Button.inline("🔙 Indietro", "back")]])
		elif e.data == b"addvoip":
			Getter = 0
			await e.edit("**☎️ Inserisci il numero del voip che desideri aggiungere ☎️**", buttons=[Button.inline("❌ Annulla", "voip")])
		elif e.data == b"voips":
			if SSs.__len__() > 0:
				Getter = 3
				msg = "__☎️ Invia il numero del voip che vuoi gestire__\n\n**LISTA VOIP**"
				for n in SSs:
					msg += f"\n`{n}`"
				await e.edit(msg, buttons=[Button.inline("❌ Annulla", "voip")])
			else:
				await e.edit("**❌ Non hai aggiunto nessun voip ❌**", buttons=[[Button.inline("➕ Aggiungi", "addvoip")], [Button.inline("🔙 Indietro", "voip")]])
		elif e.data == b"arch":
			if ArchSSs.__len__() > 0:
				Getter = 4
				msg = f"__📁 Voip Archiviati »__ **{ArchSSs.__len__()}**\n\n__☎️ Invia il numero del voip archiviato che vuoi gestire__\n\n**LISTA VOIP ARCHIVIATI**"
				for n in ArchSSs:
					msg += f"\n`{n}`"
				await e.edit(msg, buttons=[Button.inline("❌ Annulla", "voip")])
			else:
				await e.edit("**❌ Non hai archiviato nessun voip ❌**", buttons=[Button.inline("🔙 Indietro", "voip")])
		elif e.data == b"grab":
			if Grab == None:
				await e.edit("**❌ Gruppo Non Impostato ❌\n\nℹ️ Puoi impostarlo usando il bottone qui sotto!**", buttons=[[Button.inline("✍🏻 Imposta", "setgrab")], [Button.inline("🔙 Indietro", "back")]])
			else:
				await e.edit(f"__👥 Gruppo impostato »__ **{Grab}**", buttons=[[Button.inline("✍🏻 Modifica", "setgrab")], [Button.inline("🔙 Indietro", "back")]])
		elif e.data == b"setgrab":
			Getter = 5
			await e.edit("__👥 Invia la @ o il link del gruppo da cui vuoi rubare gli utenti!__", buttons=[Button.inline("❌ Annulla", "back")])
		elif e.data == b"add":
			if SSs.__len__() > 0:
				if Grab != None:
					Getter = 6
					await e.edit("__➕ Invia la @ o il link del gruppo in cui vuoi aggiungere gli utenti!__", buttons=[Button.inline("❌ Annulla", "back")])
				else:
					await e.edit("**❌ Impostare il gruppo da cui rubare gli utenti ❌**", buttons=[[Button.inline("👥 Ruba", "grab")], [Button.inline("🔙 Indietro", "back")]])
			else:
				await e.edit("**❌ Non hai aggiunto nessun voip ❌**", buttons=[[Button.inline("➕ Aggiungi", "addvoip")], [Button.inline("🔙 Indietro", "back")]])
		else:
			st = e.data.decode().split(";")
			if st[0] == "arch":
				if st[1] in SSs:
					if not st[1] in ArchSSs:
						ArchSSs[st[1]] = SSs[st[1]]
						saveArchSS()
					del(SSs[st[1]])
					saveSS()
					await e.edit("**✅ Voip Archiviato Correttamente ✅**", buttons=[Button.inline("🔙 Indietro", "voip")])
				else:
					await e.edit("**❌ Voip Non Trovato ❌**", buttons=[Button.inline("🔙 Indietro", "voip")])
			elif st[0] == "add":
				if st[1] in ArchSSs:
					SSs[st[1]] = ArchSSs[st[1]]
					saveSS()
					del(ArchSSs[st[1]])
					saveArchSS()
					await e.edit("**✅ Voip Riaggiunto Correttamente ✅**", buttons=[Button.inline("🔙 Indietro", "voip")])
				else:
					await e.edit("**❌ Voip Non Trovato ❌**", buttons=[Button.inline("🔙 Indietro", "voip")])
			elif st[0] == "del":
				if st[1] in SSs:
					CClient = TMPTelegramClient(StringSession(SSs[st[1]]), API_KEY, API_HASH)
					await CClient.connect()
					try:
						me = await CClient.get_me()
						if me != None:
							async with CClient as client:
								await client.log_out()
					except:
						pass
					del(SSs[st[1]])
					saveSS()
					await e.edit("**✅ Voip Rimosso Correttamente ✅**", buttons=[Button.inline("🔙 Indietro", "voip")])
				else:
					await e.edit("**❌ Voip Già Rimosso ❌**", buttons=[Button.inline("🔙 Indietro", "voip")])
			elif st[0] == "delarch":
				if st[1] in ArchSSs:
					CClient = TMPTelegramClient(StringSession(SSs[st[1]]), API_KEY, API_HASH)
					await CClient.connect()
					try:
						me = await CClient.get_me()
						if me != None:
							async with CClient as client:
								await client.log_out()
					except:
						pass
					del(ArchSSs[st[1]])
					saveArchSS()
					await e.edit("**✅ Voip Rimosso Correttamente ✅**", buttons=[Button.inline("🔙 Indietro", "voip")])
				else:
					await e.edit("**❌ Voip Già Rimosso ❌**", buttons=[Button.inline("🔙 Indietro", "voip")])
			elif st[0] == "info":
				await e.answer(f"ℹ️ L' errore è avvenuto nel seguente voip » {st[1]} ℹ️")
			
		
	

print("mi raccomando, inserisci il token del bot..")
bot.start()

bot.run_until_disconnected()
